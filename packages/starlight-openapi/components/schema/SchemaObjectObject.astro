---
import {
  getProperties,
  isAdditionalPropertiesWithSchemaObject,
  isSchemaObject,
  type SchemaObject,
} from '../../libs/schemaObject'
import Key from '../Key.astro'
import Tags from '../Tags.astro'

import Schema from './SchemaObject.astro'
import SchemaObjectObjectProperties from './SchemaObjectObjectProperties.astro'

interface Props {
  schemaObject: SchemaObject
}

const { schemaObject } = Astro.props

const properties = getProperties(schemaObject)
---

<Tags
  tags={[
    schemaObject.minProperties && `>= ${schemaObject.minProperties} properties`,
    schemaObject.maxProperties && `<= ${schemaObject.maxProperties} properties`,
  ]}
/>
<SchemaObjectObjectProperties {properties} required={schemaObject.required} />
{
  schemaObject.allOf &&
    schemaObject.allOf.map((allOfSchemaObject) =>
      isSchemaObject(allOfSchemaObject) ? (
        <SchemaObjectObjectProperties
          properties={getProperties(allOfSchemaObject)}
          required={allOfSchemaObject.required}
        />
      ) : null,
    )
}
{
  schemaObject.additionalProperties && (
    <Key additional name="key">
      {schemaObject.additionalProperties === true ? (
        <div class="any">any</div>
      ) : isAdditionalPropertiesWithSchemaObject(schemaObject.additionalProperties) ? (
        <Schema schemaObject={schemaObject.additionalProperties} />
      ) : null}
    </Key>
  )
}

<style>
  .any {
    color: var(--sl-color-text-accent);
    font-weight: 600;
    margin-inline-end: 0.3rem;
  }
</style>
