---
import { getBound, isOpenAPIV2Items, type Items } from '../libs/items'

import SchemaObject from './schema/SchemaObject.astro'
import Tag from './Tag.astro'
import Tags from './Tags.astro'

interface Props {
  hideExample?: boolean
  items: Items
  nullable?: boolean | undefined
}

const { hideExample, items, nullable } = Astro.props
---

{
  items.type && (
    <div>
      <span class="type">{Array.isArray(items.type) ? items.type.join(' | ') : items.type}</span>
      {items.format && <Tag>format: {items.format}</Tag>}
    </div>
  )
}
<Tags
  tags={[
    items.default && `default: ${items.default}`,
    nullable && 'nullable',
    getBound(items, 'minimum'),
    getBound(items, 'maximum'),
    items.minLength && `>= ${items.minLength} characters`,
    items.maxLength && `<= ${items.maxLength} characters`,
    items.minItems && `>= ${items.minItems} items`,
    items.maxItems && `<= ${items.maxItems} items`,
    items.pattern && `/${items.pattern}/`,
    items.multipleOf && `multiple of ${items.multipleOf}`,
    items.uniqueItems && 'unique items',
  ]}
/>

{items.enum && <div>Enum: {items.enum.join(',')}</div>}
{
  isOpenAPIV2Items(items.items) ? (
    <>
      <div>Items:</div>
      <Astro.self items={items.items} />
    </>
  ) : items.items ? (
    <SchemaObject schemaObject={items.items} {hideExample} />
  ) : null
}

<style>
  .type {
    color: var(--sl-color-text-accent);
    font-weight: 600;
    margin-inline-end: 0.3rem;
  }
</style>
