---
import type { Content } from '../../libs/content'
import { isExamples } from '../../libs/example'
import { isSchemaObject } from '../../libs/schemaObject'
import Schema from '../schema/Schema.astro'

import ContentMediaTypes from './ContentMediaTypes.astro'

interface Props {
  content: Content
}

const { content } = Astro.props
---

<starlight-openapi-content>
  <ContentMediaTypes types={Object.keys(content)} />
  {
    Object.entries(content).map(([type, media], index) => {
      return (
        <div data-openapi-media-type={type} hidden={index > 0} role="tabpanel">
          <Schema
            example={media.example}
            examples={isExamples(media.examples) ? media.examples : undefined}
            schema={isSchemaObject(media.schema) ? media.schema : undefined}
          />
        </div>
      )
    })
  }
</starlight-openapi-content>

<script>
  customElements.define(
    'starlight-openapi-content',
    class StarlightOpenAPIContent extends HTMLElement {
      #panels: HTMLDivElement[]

      constructor() {
        super()

        const select = this.querySelector<HTMLSelectElement>(':scope > select')

        if (select) {
          select.addEventListener('change', (event) => {
            if (event.currentTarget instanceof HTMLSelectElement) {
              this.#changeMediaType(event.currentTarget.value)
            }
          })
        }

        this.#panels = [...this.querySelectorAll<HTMLDivElement>(':scope > [role="tabpanel"]')]
      }

      #changeMediaType(mediaType: string) {
        for (const panel of this.#panels) {
          panel.hidden = panel.dataset['openapiMediaType'] !== mediaType
        }
      }
    },
  )
</script>
