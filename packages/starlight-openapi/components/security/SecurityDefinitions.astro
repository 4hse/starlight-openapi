---
import {
  isOpenAPIV2OAuth2SecurityScheme,
  isOpenAPIV3OAuth2SecurityScheme,
  type SecurityDefinitions,
} from '../../libs/security'
import { capitalize } from '../../libs/string'
import Md from '../Md.astro'
import Text from '../Text.astro'

import SecurityOAuth2Flow from './SecurityOAuth2Flow.astro'

interface Props {
  definitions: SecurityDefinitions | undefined
}

const { definitions } = Astro.props
---

{
  definitions && (
    <>
      <h2>Authentication</h2>
      {Object.entries(definitions).map(([name, scheme]) => (
        <section>
          <h3>{name}</h3>
          <Md text={scheme.description} />
          <Text code label="Security scheme type">
            {scheme.type}
          </Text>
          {'bearerFormat' in scheme && (
            <Text code label="Bearer format">
              {scheme.bearerFormat}
            </Text>
          )}
          {'openIdConnectUrl' in scheme && (
            <Text code label="OpenID Connect URL">
              <a href={scheme.openIdConnectUrl}>{scheme.openIdConnectUrl}</a>
            </Text>
          )}
          {scheme.type === 'apiKey' && (
            <Text code label={`${capitalize(scheme.in)} parameter name`}>
              {scheme.name}
            </Text>
          )}
          {isOpenAPIV2OAuth2SecurityScheme(scheme) ? (
            <SecurityOAuth2Flow flow={scheme} type={scheme.flow} />
          ) : isOpenAPIV3OAuth2SecurityScheme(scheme) ? (
            Object.entries(scheme.flows).map(([type, flow]) => <SecurityOAuth2Flow {flow} type={type} />)
          ) : null}
        </section>
      ))}
    </>
  )
}
