---
import { isResponseWithHeaders } from '../libs/header'
import type { Operation } from '../libs/operation'
import { getOpenAPIV2OperationProduces } from '../libs/requestBody'
import {
  getOpenAPIV2ResponseSchema,
  getOpenAPIV3ResponseContent,
  type Response,
  type Responses,
} from '../libs/response'
import type { Schema } from '../libs/schema'

import Content from './Content.astro'
import ResponseHeaders from './ResponseHeaders.astro'
import SchemaObject from './SchemaObject.astro'

interface Props {
  name: keyof Responses
  operation: Operation
  response: Response
  schema: Schema
}

const { name, operation, response, schema } = Astro.props

const openAPIV2ResponseSchema = getOpenAPIV2ResponseSchema(response)
const openAPIV3ResponseContent = getOpenAPIV3ResponseContent(response)

const produces = getOpenAPIV2OperationProduces(schema, operation)
---

<h3>Response {name}</h3>
<div>
  <div>Description: {response.description}</div>
  {produces && produces.length > 0 && <div>Produces: {produces.join(', ')}</div>}
  {isResponseWithHeaders(response) && <ResponseHeaders headers={response.headers} />}
  {(openAPIV2ResponseSchema || openAPIV3ResponseContent) && <h4>Response schema</h4>}
  {
    openAPIV2ResponseSchema ? (
      <SchemaObject schemaObject={openAPIV2ResponseSchema} />
    ) : openAPIV3ResponseContent ? (
      <Content content={openAPIV3ResponseContent} />
    ) : null
  }
</div>
